@using Class.Auth
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json
@attribute [Authorize]
@inject NavigationManager NavigationManager

@code {
    [Parameter] public MenuResource? Resource { get; set; }

    public MenuResource? TableButtonResource { get; set; }

    public MenuResource? OrderButtonResource { get; set; }

    private string? _selectedPage;
    [Parameter]
    public string? selectedPage
    {
        get => _selectedPage;
        set
        {
            if (_selectedPage != value)
            {
                _selectedPage = value;
                selectedPageChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter] public EventCallback<string> selectedPageChanged { get; set; }

    [Parameter] public EventCallback SaveFunction { get; set; }

    private bool isTableMenu = true;
    private bool isSaved = false;
    private bool isDropdown = false;

    // protected override Task OnAfterRenderAsync(bool firstRender)
    // {

    //     if(firstRender && Resource != null){
    //         TableButtonResource = Resource.Children?.FirstOrDefault(r => r.MenuName == "Table Button");
    //         OrderButtonResource = Resource.Children?.FirstOrDefault(r => r.MenuName == "Order Button");
    //         Console.WriteLine(JsonSerializer.Serialize(TableButtonResource, new JsonSerializerOptions { WriteIndented = true }));
    //     }

    //     return base.OnAfterRenderAsync(firstRender);
    // }

    protected override Task OnInitializedAsync()
    {
        if (Resource != null)
        {
            TableButtonResource = Resource.Children?.FirstOrDefault(r => r.MenuName == "Table Button");
            OrderButtonResource = Resource.Children?.FirstOrDefault(r => r.MenuName == "Order Button");
            //Console.WriteLine(JsonSerializer.Serialize(TableButtonResource, new JsonSerializerOptions { WriteIndented = true }));
        }
        return base.OnInitializedAsync();
    }

    private async Task SetSelectedPage(string page)
    {
        selectedPage = page;
        await selectedPageChanged.InvokeAsync(page);
    }

    private void Save()
    {

        if (!isSaved && SaveFunction.HasDelegate)
        {
            // Save logic here
            SaveFunction.InvokeAsync(null);

            isSaved = true;
        }
    }

    private void ToggleDropdown()
    {
        isDropdown = !isDropdown;
    }

    private void Logout()
    {
        NavigationManager.NavigateTo("/login");
    }
}

<div class="header">
    <div class="logo-and-nav">
        <img src="./public/Logo.png" class="logo-image" alt="LOGO" />
        <div class="logo-text">
            <h3>Morning coffee</h3>
            <div class="function-selection">
                <div class="nav-buttons">
                    <AuthorizeView Resource="TableButtonResource" Policy="Read">
                        <Authorized>
                            <button class="nav-button @(selectedPage == "Table" ? "selected" : "")"
                                    @onclick=@(async () => {
                                    await SetSelectedPage("Table");
                                    isTableMenu = true;})>
                                Table
                            </button>
                        </Authorized>
                        <NotAuthorized></NotAuthorized>
                    </AuthorizeView>
                    <AuthorizeView Resource="OrderButtonResource" Policy="Read">
                        <Authorized>
                            <button class="nav-button @(selectedPage == "Order" ? "selected" : "")"
                                    @onclick=@(async () => {
                                    await SetSelectedPage("Order");
                                    isTableMenu = false;})>
                                Order
                            </button>
                        </Authorized>
                        <NotAuthorized></NotAuthorized>
                    </AuthorizeView>
                </div>
                <AuthorizeView Resource="Resource" Policy="ReadWrite">
                    <Authorized>
                        <button class="save-button-@(isSaved ? "Saved" : "Unsaved")"
                                @onclick="Save">
                            @(isSaved ? "Saved" : "Unsaved")
                        </button>
                    </Authorized>
                    <NotAuthorized></NotAuthorized>
                </AuthorizeView>
                <div class="underline"
                     style="left: @(selectedPage == "Table" ? "0px" : "64px")"></div>
            </div>
        </div>
    </div>
    <button class="user-toggle-menu" @onclick="ToggleDropdown">
        <img class="user-image" src="./public/Rectangle.png" alt="Avatar" />
    </button>
    <div class="dropdown-menu @(isDropdown ? "dropdown-visible" : "")">
        <ul>
            <li>
                <img src="./public/Logout.png" alt="logout symbol" />
                <button class="logout" @onclick="Logout">Logout</button>
            </li>
        </ul>
    </div>
</div>