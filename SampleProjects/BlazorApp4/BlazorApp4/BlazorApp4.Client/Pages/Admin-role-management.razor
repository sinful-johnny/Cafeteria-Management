@page "/admin/role/management"
@using Class
@using System.Text.Json

<div class="admin-page">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h3>Admin</h3>
        </div>
        <ul>
            <li><a href="/admin">User</a></li>
            <li class="selected"><a href="/admin/role">Role</a></li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <header class="header">
            <div class="header-content">
                <label>Role/Role Management</label>
                <a href="/Account/Login" class="logout-btn">Logout</a>
            </div>
        </header>

        <!-- Search -->
        <div class="search-and-buttons">
            <a href="/admin/role" >Back</a>
        </div>

        <!-- Table -->
        <div class="table-container">
            <table class="user-table">
                <thead>
                    <tr>
                        <th></th>
                        @foreach (var role in Roles){
                            <th>@role.RoleName</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var menu in Menus)
                    {
                        <tr>
                            <td>@menu.MenuName</td>
                            @foreach (var role in Roles)
                            {
                                <td>
                                    <div class="custom-select">
                                        <select @onchange="(e) => UpdatePermission(role, menu, e.Value)">
                                            @foreach (var perm in Perms)
                                            {
                                                var rmp = RoleMenuPerms?.FirstOrDefault(rmp => rmp.Menu.Id == menu.Id && rmp.Role.Id == role.Id);
                                                <option value="@perm.Id" selected="@(rmp != null && rmp.Perm?.Id == perm.Id ? "selected" : false)">
                                                    @perm.PermName
                                                </option>
                                            }
                                        </select>
                                    </div>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {

    //private List<Role> Roles { get; set; } = new()
    //{
    //    new Role { Id = 1, RoleName = "Admin", Description = "Do shit", Users = 9, TableTypePerm = "Read,Write", CanvasPerm = "Read,Write",
    //                FoodPerm = "Read,Write", OrderPerm = "Read,Write", UserPerm = "Read,Write", RolePerm = "Read,Write" },
    //    new Role { Id = 2, RoleName = "Customer", Description = "Do shit", Users = 5, TableTypePerm = "No", CanvasPerm = "No",
    //                FoodPerm = "No", OrderPerm = "Read", UserPerm = "No", RolePerm = "No" },
    //    new Role { Id = 3, RoleName = "Staff", Description = "Do shit", Users = 3, TableTypePerm = "Read", CanvasPerm = "Read,Write",
    //                FoodPerm = "Read,Write", OrderPerm = "Read,Write", UserPerm = "Read", RolePerm = "No" },
    //    new Role { Id = 4, RoleName = "Manager", Description = "Do shit", Users = 2, TableTypePerm = "Read,Write", CanvasPerm = "Read,Write",
    //                FoodPerm = "Read,Write", OrderPerm = "Read,Write", UserPerm = "Read", RolePerm = "Read" }
    //};

    public required List<Role> Roles { get; set; }
    public required List<Menu> Menus { get; set; }
    public required List<Perm> Perms { get; set; }

    public List<RoleMenuPerm>? RoleMenuPerms { get; set; }

    protected async override Task OnInitializedAsync()
    {
        Roles = MockGenerator.GenerateMockRoles();
        Menus = MockGenerator.GenerateMockMenus();
        Perms = MockGenerator.GenerateMockPerms();

        RoleMenuPerms = MockGenerator.GenerateMockRoleMenuPerms(Roles,Menus,Perms);

        await base.OnInitializedAsync();
    }

    private void UpdatePermission(Role role, Menu menu, object? value)
    {
        var property = RoleMenuPerms?.FirstOrDefault(rmp => rmp.Menu.Id == menu.Id && rmp.Role.Id == role.Id);
        if (property != null && value != null)
        {
            int permId;
            var res = int.TryParse((string)value,out permId);
            if(res){
                property.Perm = Perms?.FirstOrDefault(p => p.Id == permId);
                // Console.WriteLine(JsonSerializer.Serialize(property, new JsonSerializerOptions
                //     {
                //         PropertyNameCaseInsensitive = true
                //     }));

                //make API call
            }
        }
    }

    public static class MockGenerator
    {
        private static Random random = new Random();

        public static List<Role> GenerateMockRoles()
        {
            return new List<Role>
            {
                new Role { Id = 1, RoleName = "Admin"},
                new Role { Id = 2, RoleName = "Manager"},
                new Role { Id = 3, RoleName = "Staff"   },
                new Role { Id = 4, RoleName = "Customer"},
                new Role { Id = 5, RoleName = "Guest"   },
                new Role { Id = 6, RoleName = "Support" }
            };
        }

        public static List<Menu> GenerateMockMenus()
        {
            return new List<Menu>
            {
                new Menu { Id = 1, MenuName = "Dashboard" },
                new Menu { Id = 2, MenuName = "Settings" },
                new Menu { Id = 3, MenuName = "Profile" },
                new Menu { Id = 4, MenuName = "Reports" },
                new Menu { Id = 5, MenuName = "Notifications" },
                new Menu { Id = 6, MenuName = "Help" }
            };
        }

        public static List<Perm> GenerateMockPerms()
        {
            return new List<Perm>
            {
                new Perm { Id = 1, PermName = "No" },
                new Perm { Id = 2, PermName = "Read" },
                new Perm { Id = 3, PermName = "ReadWrite" }
            };
        }

        public static List<RoleMenuPerm> GenerateMockRoleMenuPerms(List<Role> roles, List<Menu> menus, List<Perm> perms)
        {
            var roleMenuPerms = new List<RoleMenuPerm>();

            foreach (var role in roles)
            {
                foreach (var menu in menus)
                {
                    var perm = perms[random.Next(perms.Count)];
                    roleMenuPerms.Add(new RoleMenuPerm
                        {
                            Role = role,
                            Menu = menu,
                            Perm = perm
                        });
                }
            }

            return roleMenuPerms;
        }
    }
}


