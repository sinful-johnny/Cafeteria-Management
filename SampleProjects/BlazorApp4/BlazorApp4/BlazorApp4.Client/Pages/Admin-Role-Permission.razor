@page "/admin/role/management"
@using Class
@using System.Text.Json
@using Class.Auth
@using Class.Controller
@using Class.Converter
@using Class.MockData
@inject MenuService MenuService; 
@inject RoleService RoleService;
@inject RoleMenuPermController RoleMenuPermController;
@inject MenuResourceService MenuResourceService;

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<AuthorizeView Policy="ReadWrite" Resource="menuResource">
    <Authorized>
        <div class="admin-page">
            <!-- Sidebar -->
            <div class="sidebar">
                <div class="sidebar-header">
                    <h3>Admin</h3>
                </div>
                <ul>
                    <li><a href="/admin">User</a></li>
                    <li class="selected"><a href="/admin/role">Role</a></li>
                </ul>
            </div>

            <!-- Main Content -->
            <div class="main-content">
                <header class="header">
                    <div class="header-content">
                        <label>Role/Role Management</label>
                        <a href="/Account/Login" class="logout-btn">Logout</a>
                    </div>
                </header>

                <!-- Search -->
                <div class="search-and-buttons">
                    <a href="/admin/role">Back</a>
                </div>

                <!-- Table -->
                <div class="table-container">
                    <table class="user-table">
                        <thead>
                            <tr>
                                <th></th>
                                @foreach (var role in Roles)
                                {
                                    <th>@role.RoleName</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var menu in Menus)
                            {
                                <tr>
                                    <td>@menu.MenuName</td>
                                    @foreach (var role in Roles)
                                    {
                                        var data = ViewData.FirstOrDefault(d => d.Menu.Id == menu.Id && d.Role.Id == role.Id);
                                        <td>
                                            @if (data != null)
                                            {
                                                <div class="dropdown">
                                                    <button class="btn btn-secondary dropdown-toggle" type="button" @onclick="@(() => ToggleDropdown(data))">
                                                        Edit Perms
                                                    </button>
                                                    <div class="dropdown-menu @(data.isOpen ? "show" : "")">
                                                        @foreach (var perm in Perms)
                                                        {
                                                            var dataPerm = data.Perms.FirstOrDefault(p => p.Perm.Id == perm.Id);

                                                            <div class="dropdown-item">
                                                                @if (dataPerm != null)
                                                                {
                                                                    <input type="checkbox" @bind="dataPerm.IsSelected" id="@dataPerm?.Perm.Id"
                                                                           @bind:after="@(() => UpdatePermission(role, menu, dataPerm))" />
                                                                }
                                                                <span>@dataPerm?.Perm.PermName</span>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            }
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <h3>Access Denied</h3>
    </NotAuthorized>
</AuthorizeView>


@code {
    private string MenuName = "Admin Role Permission";
    public MenuResource? menuResource { get; set; }

    public required List<Role> Roles { get; set; } = new List<Role>();
    public required List<Menu> Menus { get; set; } = new List<Menu>();
    public required List<Perm> Perms { get; set; }

    public required List<DecoratedMenuPerm> ViewData { get; set; }

    private string? menuResourceResponse;
    private async Task FetchResource()
    {
        menuResourceResponse = await MenuResourceService.GetResourceAsync(MenuName);
    }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            await FetchResource();
            if (menuResourceResponse != null)
            {
                menuResource = JsonToMenuResourceConverter.Convert(menuResourceResponse);
                //Console.WriteLine(JsonSerializer.Serialize(menuResource));
            }
        }
        catch (Exception e)
        {

        }

        string RoleJson = await RoleService.GetRolesAsync();
        if(RoleJson != null){
            var rolesObject = JsonSerializer.Deserialize<List<Role>>(RoleJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            if(rolesObject != null){
                Roles = rolesObject;
            }else{
                Roles = new List<Role>();
            }
        }

        string MenuJson = await MenuService.GetMenusAsync();
        if (MenuJson != null){
            var menusObject = JsonSerializer.Deserialize<List<Menu>>(MenuJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            if(menusObject != null){
                Menus = menusObject;
            }else{
                Menus = new List<Menu>();
            }
        }

        List<RoleMenuPerm> RoleMenuPerms = new List<RoleMenuPerm>();
        string RoleMenuPermJson = await RoleMenuPermController.GetRoleMenuPermControllerAsync();
        if (MenuJson != null)
        {
            var RoleMenuPermObject = JsonSerializer.Deserialize<List<RoleMenuPerm>>(RoleMenuPermJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            if (RoleMenuPermObject != null)
            {
                RoleMenuPerms = RoleMenuPermObject;
            }
        }

        Perms = MockGenerator.GenerateMockPerms();

        ViewData = new List<DecoratedMenuPerm>();

        foreach(var role in Roles){
            foreach(var menu in Menus){

                var decoratedPerm = new List<DecoratedPerm>();
                foreach(var perm in Perms){
                    decoratedPerm.Add(new DecoratedPerm
                        {
                            Perm = perm,
                            IsSelected = RoleMenuPerms.Any(
                                rmp => rmp.Menu.Id == menu.Id && 
                                rmp.Role.Id == role.Id && 
                                (rmp.Perms != null && rmp.Perms.Any(p => p.Id == perm.Id))
                            )
                        });
                }
                ViewData.Add( new DecoratedMenuPerm{
                    Menu = menu,
                    Role = role,
                    Perms = decoratedPerm
                } );
            }
        }
        await base.OnInitializedAsync();
    }

    private async void UpdatePermission(Role role, Menu menu, DecoratedPerm value)
    {
        if(value.IsSelected){
            var res = await RoleMenuPermController.AddRoleMenuPermAsync(role.Id, menu.Id, value.Perm.Id);
            if (!res.IsSuccessStatusCode)
            {
                var property = ViewData?.FirstOrDefault(rmp => rmp.Menu.Id == menu.Id && rmp.Role.Id == role.Id);
                if (property != null)
                {
                    property.Perms = property.Perms.Select(p => { p.IsSelected = p.Perm.Id == value.Perm.Id ? !p.IsSelected : p.IsSelected; return p; }).ToList();
                }
            }
        }else{
            var res = await RoleMenuPermController.DeleteRoleMenuPermAsync(role.Id, menu.Id, value.Perm.Id);
            if (!res.IsSuccessStatusCode)
            {
                var property = ViewData?.FirstOrDefault(rmp => rmp.Menu.Id == menu.Id && rmp.Role.Id == role.Id);
                if (property != null)
                {
                    property.Perms = property.Perms.Select(p => { p.IsSelected = p.Perm.Id == value.Perm.Id ? !p.IsSelected : p.IsSelected; return p; }).ToList();
                }
            }
        }
    }

    public void ToggleDropdown(DecoratedMenuPerm dmp)
    {
        ViewData = ViewData.Select(d => { d.isOpen = d == dmp ? dmp.isOpen : false; return d; }).ToList();
        dmp.isOpen = !dmp.isOpen;
    }

    public class DecoratedPerm{
        public required Perm Perm { get; set; }
        public bool IsSelected { get; set; }
    }

    public class DecoratedMenuPerm {
        public required Menu Menu { get; set; }
        public required Role Role { get; set; }
        public required List<DecoratedPerm> Perms { get; set; }
        public bool isOpen { get; set; } = false;
    }
}


