@page "/admin/role"
@using Class
@using Class.Auth
@using Class.Controller
@using Class.Converter
@using Class.MockData
@using System.Text.Json
@inject RoleService RoleService;
@inject MenuResourceService MenuResourceService;

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<AuthorizeView Policy="Read" Resource="menuResource">
    <Authorized>
        <div class="admin-page">
            <!-- Sidebar -->
            <div class="sidebar">
                <div class="sidebar-header">
                    <h3>Admin</h3>
                </div>
                <ul>
                    <li><a href="/admin">User</a></li>
                    <li class="selected"><a href="/admin/role">Role</a></li>
                </ul>
            </div>

            <!-- Main Content -->
            <div class="main-content">
                <header class="header">
                    <div class="header-content">
                        <label>Role/All</label>
                        <a href="/Account/Login" class="logout-btn">Logout</a>
                    </div>
                </header>

                <!-- Search -->
                <div class="search-and-buttons">
                    <input type="text" placeholder="Search" bind="@SearchQuery">
                    <button style="border:none; outline:none; background-color:transparent;color:#441FCB">New</button>
                    <button style="border:none; outline:none; background-color:transparent;color:#DF0728">Delete</button>
                    <a style="border:none; outline:none; background-color:transparent;color:#441FCB;text-decoration:none;" href="/admin/role/management">Manage Access</a>
                </div>

                <!-- Table -->
                <div class="table-container">
                    <table class="user-table">
                        <thead>
                            <tr>
                                <th>
                                    <input type="checkbox" class="checkbox-rounded" value="@selectAllChecked" @onchange="ToggleSelectAll" />
                                </th>
                        @* <th>STT</th> *@
                                <th>Role Name</th>
                                <th>Users</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var role in PaginatedRoles)
                            {
                                <tr>
                                    <td>
                                        <input type="checkbox" class="checkbox-rounded" @bind="role.Selected" @onclick="() => ToggleRowSelection(role)" />
                                    </td>
                                    @* <td>@role.Role.Id</td> *@
                                    <td>@role.Role.RoleName</td>
                                    <td>@role.Role.UserCount</td>
                                    <td>
                                        <a href="/admin/role/userManage" style="color:#441FCB; text-decoration:none;">Manager Users</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="pagination">
                    <div class="item-per-page">
                        <span>Rows per page:</span>
                        <select @onchange="UpdateRowsPerPage">
                            <option value="10">10</option>
                            <option value="20">20</option>
                            <option value="50">50</option>
                        </select>
                    </div>
                    <div class="choose-page">
                        <span>@(TotalRows % RowsPerPage != 0 ? (TotalRows / RowsPerPage + 1) : (TotalRows / RowsPerPage)) page(s)</span>
                        <button @onclick="PreviousPage">&lt;</button>
                        <span>@CurrentPage</span>
                        <button @onclick="NextPage">&gt;</button>
                        <span>@(CurrentPage < (TotalRows % RowsPerPage != 0 ? (TotalRows / RowsPerPage + 1) : (TotalRows / RowsPerPage)) ? (CurrentPage + 1) : "")</span>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <h3>Access Denied</h3>
    </NotAuthorized>
</AuthorizeView>


@code {
    private string MenuName = "Admin Role Management";
    public MenuResource? menuResource { get; set; }

    private bool ShowRoleDropdown { get; set; }
    private bool ShowEmailDropdown { get; set; }
    private bool ShowPhoneDropdown { get; set; }
    private bool ShowLockoutDropdown { get; set; }

    private string SearchQuery { get; set; }

    private int RowsPerPage { get; set; } = 10;
    private int CurrentPage { get; set; } = 1;
    private int TotalRows { get; set; } = 4;

    public required List<RoleWithDecoration> Roles { get; set; } = new List<RoleWithDecoration>();

    private string? menuResourceResponse;
    private async Task FetchResource()
    {
        menuResourceResponse = await MenuResourceService.GetResourceAsync(MenuName);
    }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            await FetchResource();
            if (menuResourceResponse != null)
            {
                menuResource = JsonToMenuResourceConverter.Convert(menuResourceResponse);
                //Console.WriteLine(JsonSerializer.Serialize(menuResource));
            }
        }
        catch (Exception e)
        {

        }

        string roleResponse = await RoleService.GetRolesAsync();
        if(roleResponse != null){
            var roleList = JsonSerializer.Deserialize<List<Role>>(roleResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            if(roleList != null){
                Roles = roleList.Select(r => new RoleWithDecoration { Role = r, Selected = false }).ToList();
            }
        }

        await base.OnInitializedAsync();
    }

    private void ToggleRowSelection(RoleWithDecoration role)
    {
        role.Selected = !role.Selected;
    }

    private List<RoleWithDecoration> PaginatedRoles => Roles
    .Skip((CurrentPage - 1) * RowsPerPage)
    .Take(RowsPerPage)
    .ToList();

    private bool selectAllChecked = false;

    private void ToggleSelectAll()
    {
        selectAllChecked = !selectAllChecked;
        foreach (var role in PaginatedRoles)
        {
            role.Selected = selectAllChecked;
        }
    }

    private void UpdateRowsPerPage(ChangeEventArgs e)
    {
        RowsPerPage = int.Parse(e.Value.ToString());
        CurrentPage = 1; // Reset to first page
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1) CurrentPage--;
    }

    private void NextPage()
    {
        if (CurrentPage * RowsPerPage < TotalRows) CurrentPage++;
    }

    public class RoleWithDecoration{
        public required Role Role { get; set; }
        public bool Selected { get; set; }
    }
}


