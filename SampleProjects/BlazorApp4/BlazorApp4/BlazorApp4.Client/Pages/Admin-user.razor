@page "/admin"
@using Class
@using Class.Controller
@using System.Text.Json
@using Class.Converter
@inject UserService UserService;
@inject RoleService RoleService;

<div class="admin-page">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h3>Admin</h3>
        </div>
        <ul>
            <li class="selected">
                <a href="/admin">User</a>
            </li>
            <li><a href="/admin/role">Role</a></li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <header class="header">
            <div class="header-content">
                <label>User/All</label>
                <a href="/Account/Login" class="logout-btn">Logout</a>
            </div>
        </header>

        <div class="overflow-auto" style="height: 100%">
            <!-- Filters, search and some buttons -->
            <div class="upper-body-container">
                <div class="filters">
                    <div class="filter-dropdown">
                        <button class="dropdown-label" @onclick="() => ToggleDropdown(FilterType.Role)">Role</button>
                        @if (ShowRoleDropdown)
                        {
                            <ul class="dropdown-menu">
                                <li @onclick='() => SelectFilter(FilterType.Role, "Admin")'>Admin</li>
                                <li @onclick='() => SelectFilter(FilterType.Role, "Manager")'>Manager</li>
                                <li @onclick='() => SelectFilter(FilterType.Role, "Staff")'>Staff</li>
                                <li @onclick='() => SelectFilter(FilterType.Role, "Customer")'>Customer</li>
                            </ul>
                        }
                    </div>


                    <div class="filter-dropdown">
                        <button class="dropdown-label" @onclick="() => ToggleDropdown(FilterType.EmailVerified)">Email Verified</button>
                        @if (ShowEmailDropdown)
                        {
                            <ul class="dropdown-menu">
                                <li @onclick='() => SelectFilter(FilterType.EmailVerified, " Verified")'>Verified</li>
                                <li @onclick='() => SelectFilter(FilterType.EmailVerified, " Unverified")'>Unverified</li>
                            </ul>
                        }
                    </div>
                    <div class="filter-dropdown">
                        <button class="dropdown-label" @onclick="() => ToggleDropdown(FilterType.PhoneVerified)">Phone Number Verified</button>
                        @if (ShowPhoneDropdown)
                        {
                            <ul class="dropdown-menu">
                                <li @onclick='() => SelectFilter(FilterType.PhoneVerified, " Verified")'>Verified</li>
                                <li @onclick='() => SelectFilter(FilterType.PhoneVerified, " Unverified")'>Unverified</li>
                            </ul>
                        }
                    </div>
                    <div class="filter-dropdown">
                        <button class="dropdown-label" @onclick="() => ToggleDropdown(FilterType.Lockout)">Lockout</button>
                        @if (ShowLockoutDropdown)
                        {
                            <ul class="dropdown-menu">
                                <li @onclick='() => SelectFilter(FilterType.Lockout, " Locked")'>Locked</li>
                                <li @onclick='() => SelectFilter(FilterType.Lockout, " Unlocked")'>Unlocked</li>
                            </ul>
                        }
                    </div>
                </div>
                <div class="search-and-buttons">
                    <input type="text" placeholder="Search" bind="@SearchQuery">
                    <button style="border:none; outline:none; background-color:transparent;color:#441FCB">New</button>
                    <button style="border:none; outline:none; background-color:transparent;color:#DF0728">Delete</button>
                </div>
            </div>

            <!-- Active Filters -->
            <div class="active-filters">
                @foreach (var filter in ActiveFilters)
                {
                    @foreach (var value in filter.Value)
                    {
                        <span class="active-filter">
                            @filter.Key - @value
                            <button class="remove-filter" @onclick="() => RemoveFilter(filter.Key, value)">X</button>
                        </span>
                    }
                }
            </div>

            <!-- Table -->
            <div class="table-container">
                <table class="user-table">
                    <thead>
                        <tr>
                            <th>
                                <input type="checkbox" class="checkbox-rounded" value="@selectAllChecked" @onchange="ToggleSelectAll" />
                            </th>
                            @* <th>STT</th> *@
                            <th>Username</th>
                            <th>Email</th>
                            <th>Email Verified</th>
                            <th>Phone Number</th>
                            <th>Phone Verified</th>
                            <th>Role</th>
                            <th>Lockout</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in PaginatedUsers)
                        {
                            <tr>
                                <td>
                                    <input type="checkbox" class="checkbox-rounded" @bind="user.User.Selected" @onclick="() => ToggleRowSelection(user)" />
                                </td>
                                @* <td>@user.User.Id</td> *@
                                <td>@user.User.Username</td>
                                <td>@user.User.Email</td>
                                <td>
                                    <div class="custom-select">
                                        <select @onchange="@(e => user.User.EmailVerified = e.Value.ToString() == "Verified")">
                                            <option value="Verified" selected="@(user.User.EmailVerified)">Verified</option>
                                            <option value="Unverified" selected="@(user.User.EmailVerified == false)">Unverified</option>
                                        </select>
                                    </div>
                                </td>
                                <td>@user.User.PhoneNumber</td>
                                <td>
                                    <div class="custom-select">
                                        <select @onchange="@(e => user.User.PhoneVerified = e.Value.ToString() == "Verified")">
                                            <option value="Verified" selected="@(user.User.PhoneVerified)">Verified</option>
                                            <option value="Unverified" selected="@(user.User.PhoneVerified == false)">Unverified</option>
                                        </select>
                                    </div>
                                </td>
                                <td>
                                    @* <div class="custom-select">

                                    </div> *@
                                    <div class="dropdown">
                                        <button class="btn btn-secondary dropdown-toggle" type="button" @onclick="@(() => ToggleRoleDropdown(user))">
                                            Edit  Roles
                                        </button>
                                        <div class="dropdown-menu @(user.isOpen ? "show" : "")">
                                            @foreach (var role in Roles)
                                            {
                                                var dataRole = user.Roles?.FirstOrDefault(p => p.Role.Id == role.Id);
                                                //Console.WriteLine(JsonSerializer.Serialize(user.Roles, new JsonSerializerOptions { WriteIndented = true }));

                                                <div class="dropdown-item">
                                                    @if (dataRole != null)
                                                    {
                                                        <input type="checkbox" @bind="dataRole.IsInRole"
                                                        @bind:after="@(() => UpdateUserRole(user.User.Id, dataRole.Role.Id, dataRole.IsInRole))" />
                                                    }
                                                    <span>@dataRole?.Role.RoleName</span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <label class="switch">
                                        <input type="checkbox" checked="@user.User.Locked" @onchange="() => ToggleLockout(user.User)" />
                                        <span class="slider @(user.User.Locked ? "locked" : "unlocked")"></span>
                                    </label>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="pagination">
                <div class="item-per-page">
                    <span>Rows per page:</span>
                    <select @onchange="UpdateRowsPerPage">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                    </select>
                </div>
                <div class="choose-page">
                    <span>@(TotalRows % RowsPerPage != 0 ? (TotalRows / RowsPerPage + 1) : (TotalRows / RowsPerPage)) page(s)</span>
                    <button @onclick="PreviousPage">&lt;</button>
                    <span>@CurrentPage</span>
                    <button @onclick="NextPage">&gt;</button>
                    <span>@(CurrentPage < (TotalRows % RowsPerPage != 0 ? (TotalRows / RowsPerPage + 1) : (TotalRows / RowsPerPage)) ? (CurrentPage + 1) : "")</span>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private enum FilterType { Role, EmailVerified, PhoneVerified, Lockout }

    private Dictionary<FilterType, List<string>> ActiveFilters { get; set; } = new();

    private bool ShowRoleDropdown { get; set; } = false;
    private bool ShowEmailDropdown { get; set; } = false;
    private bool ShowPhoneDropdown { get; set; } = false;
    private bool ShowLockoutDropdown { get; set; } = false;

    private string? SearchQuery { get; set; } = null;

    private int RowsPerPage { get; set; } = 10;
    private int CurrentPage { get; set; } = 1;
    private int TotalRows { get; set; } = 11;

    private List<UserData> Users { get; set; } = new();

    private List<Role> Roles { get; set; } = new();

    public List<UserDataWithDecoration> ViewData { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        string userResponse = await UserService.GetUsersAsync();
        if(userResponse != null){
            var usersList = JsonSerializer.Deserialize<List<UserDto>>(userResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            if(usersList != null){
                Users = usersList.Select(u => u.ConvertToUserData()).ToList();
                //Console.WriteLine(JsonSerializer.Serialize(Users, new JsonSerializerOptions { WriteIndented = true }));
            }
        }

        string roleResponse = await RoleService.GetRolesAsync();
        if(roleResponse != null){
            var rolesList = JsonSerializer.Deserialize<List<Role>>(roleResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            if(rolesList != null){
                Roles = rolesList;
            }
        }

        ViewData = new List<UserDataWithDecoration>();
        foreach(var user in Users){
            var RoleView = new List<RoleWithDecoration>();
            foreach(var role in Roles){
                RoleView.Add(new RoleWithDecoration {
                    Role = role,
                    IsInRole = user.Roles != null ? user.Roles.Any(r => r.Id == role.Id) : false
                });
            }
            ViewData.Add(new UserDataWithDecoration
            {
                User = user,
                Roles = RoleView
            });
        }

        Console.WriteLine(JsonSerializer.Serialize(ViewData, new JsonSerializerOptions { WriteIndented = true }));

        await base.OnInitializedAsync();
    }

    private void updateRowCount()
    {
        TotalRows = Users.Count;
    }

    private void ToggleDropdown(FilterType filterType)
    {
        Console.WriteLine(filterType);
        ShowRoleDropdown = filterType == FilterType.Role && !ShowRoleDropdown;
        Console.WriteLine(ShowRoleDropdown);
        ShowEmailDropdown = filterType == FilterType.EmailVerified && !ShowEmailDropdown;
        ShowPhoneDropdown = filterType == FilterType.PhoneVerified && !ShowPhoneDropdown;
        ShowLockoutDropdown = filterType == FilterType.Lockout && !ShowLockoutDropdown;
    }

    private void SelectFilter(FilterType filterType, string value)
    {
        if (!ActiveFilters.ContainsKey(filterType))
        {
            ActiveFilters[filterType] = new List<string>(); // Initialize list if empty
        }

        // Add the value only if it's not already in the list
        if (!ActiveFilters[filterType].Contains(value))
        {
            ActiveFilters[filterType].Add(value);
        }

        ToggleDropdown(filterType);
    }



    private void RemoveFilter(FilterType filterType, string value)
    {
        if (ActiveFilters.ContainsKey(filterType))
        {
            ActiveFilters[filterType].Remove(value);

            // Remove filterType if the list becomes empty
            if (ActiveFilters[filterType].Count == 0)
            {
                ActiveFilters.Remove(filterType);
            }
        }
    }


    private List<UserData> users = new List<UserData>();
    private bool selectAllChecked = false;

    private void ToggleSelectAll()
    {
        selectAllChecked = !selectAllChecked;
        foreach (var user in PaginatedUsers)
        {
            user.User.Selected = selectAllChecked;
        }
    }

    private void ToggleRowSelection(UserDataWithDecoration user)
    {
        user.User.Selected = !user.User.Selected;
    }

    private List<UserDataWithDecoration> PaginatedUsers => ViewData
    .Skip((CurrentPage - 1) * RowsPerPage)
    .Take(RowsPerPage)
    .ToList();

    private void UpdateRowsPerPage(ChangeEventArgs e)
    {
        RowsPerPage = int.Parse(e.Value.ToString());
        CurrentPage = 1; // Reset to first page
    }

    private void ToggleLockout(UserData user)
    {
        user.Locked = !user.Locked;
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1) CurrentPage--;
    }

    private void NextPage()
    {
        if (CurrentPage * RowsPerPage < TotalRows) CurrentPage++;
    }

    public void ToggleRoleDropdown(UserDataWithDecoration User)
    {
        ViewData = ViewData.Select(d => { d.isOpen = d.User.Id == User.User.Id ? User.isOpen : false; return d; }).ToList();
        User.isOpen = !User.isOpen;
        //Console.WriteLine(JsonSerializer.Serialize(User.isOpen, new JsonSerializerOptions { WriteIndented = true }));
    }

    public async Task UpdateUserRole(string userId, string roleId, bool isInRole){
        HttpResponseMessage response;
        try{
            if (isInRole)
            {
                response = await UserService.AddRoleAsync(userId, roleId);
            }
            else
            {
                response = await UserService.RemoveRoleAsync(userId, roleId);
            }

            if(!response.IsSuccessStatusCode){
                isInRole = !isInRole;
            }
            var message = response.Content.ReadAsStringAsync();
            Console.WriteLine(message);
        }catch(Exception e){
            
        }
    }

    public class UserDataWithDecoration{
        public required UserData User { get; set; }
        public List<RoleWithDecoration>? Roles { get; set; }
        public bool isOpen { get; set; } = false;
    }

    public class RoleWithDecoration {
        public required Role Role { get; set; }
        public bool IsInRole { get; set; }
    }
}