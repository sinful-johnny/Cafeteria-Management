@page "/"
@using BlazorApp2.Components;
@using System.Text.Json;
@using BlazorApp4.Client.Components
@using BlazorApp4.Client.Layout
@using Class.Controller
@using Class.Services;
@using Class.Converter;
@using Class;
@inject TableTypesService TableTypeService;
@inject FoodTypesService FoodService;
@inject TableService TableService;

@using Microsoft.AspNetCore.Authorization
@using static Class.Converter.TablesToDtoConverter

@attribute [Authorize]


	<PageTitle>Deez nuts</PageTitle>
	<div class="Global--Container">
		<Header @bind-selectedPage="@selectedPage" SaveFunction="@Save" />
		<div class="BodyStyle">
			<Navbar selectedPage="@selectedPage" tableListItemsService="@tableListItemsService" foodListItemsService="@foodListItemsService"/>
			<div>
				@if(rectangles != null){
				<MainCanvas @bind-rectangles="rectangles" @bind-selectedTable="selectedTable" Log="@log" foodListItemService="@foodListItemsService" />
			}
		</div>
		@if (selectedTable != null)
		{
			<PropertiesSideBar selectedTable="selectedTable" ClearTableFunc="@clearTable" />
		}
	</div>
</div>



@code{
	public List<ITable>? rectangles = null;
	public ITable? selectedTable = null;
	private string selectedPage = "Table";

	public TableListItemsService? tableListItemsService { get; set; }
	public FoodListItemService? foodListItemsService { get; set; }

	[Inject]
	public IJSRuntime? JS { get; set; }

	public void clearTable()
	{
		if(selectedTable != null)
		{
			selectedTable.Foods.Clear();
		}
	}

	public async void Save()
	{
		//string tablesJSON = JsonSerializer.Serialize(rectangles);
		if (rectangles != null && tableListItemsService != null)
		{
			string tablesJSON = TablesToDtoConverter.ConvertToJson(rectangles);
			//string tablesDataJSON = JsonSerializer.Serialize(tableListItemsService.Items);
			if(JS != null)
			{
				//Console.WriteLine(tablesJSON);
				//JS.InvokeVoidAsync("canvasInterop.logJSONObject", tablesDataJSON);
				var result = await TableService.PostTableAsync(tablesJSON);
				Console.WriteLine(result);
			}

		}
	}

	public void log()
	{
		Console.WriteLine(selectedTable);
	}

	// private void OnSelectedPage(string page)
	// {
	// 	selectedPage = page;
	// }

	private string? tableResponse; 
	private async Task FetchTables() { 
		tableResponse = await TableTypeService.GetTablesAsync();
	}

	private string? foodResponse;
	private async Task FetchFood(){
		foodResponse = await FoodService.GetFoodsAsync();
	}

	private string? canvasResponse;
	private async Task FetchCanvas(){
		canvasResponse = await TableService.GetTablesAsync();
	}


	protected override async Task OnInitializedAsync()
	{
		tableListItemsService = new TableListItemsService();
		foodListItemsService = new FoodListItemService();

		await FetchTables();
		if (tableResponse != null && tableListItemsService != null)
		{
			tableListItemsService.SetItemsFromJson(tableResponse);
		}

		await FetchFood();
		if(foodResponse != null && foodListItemsService != null){
			foodListItemsService.SetItemsFromJson(foodResponse);
			//Console.WriteLine(foodListItemsService.ToString());
		}

		await FetchCanvas();
		if (canvasResponse != null){
			var canvasDto = JsonSerializer.Deserialize<List<TABLE_FOODsDto>>(canvasResponse, new JsonSerializerOptions
				{
					PropertyNameCaseInsensitive = true
				});
			if(canvasDto != null){
				Console.WriteLine($"Dto: {JsonSerializer.Serialize(canvasDto)}");
				rectangles = TablesToDtoConverter.ConvertToITable(canvasDto);
				Console.WriteLine($"Rectangles: {JsonSerializer.Serialize(rectangles)}");
			}
			if(rectangles == null){
				rectangles = new List<ITable>();
			}
		}

		await base.OnInitializedAsync();
	}
}
