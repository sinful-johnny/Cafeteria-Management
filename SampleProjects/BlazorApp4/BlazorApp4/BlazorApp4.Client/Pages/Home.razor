@page "/"
@using BlazorApp2.Components;
@using System.Text.Json;
@using BlazorApp4.Client.Components
@using BlazorApp4.Client.Layout
@using Class.Controller
@using Class.Services;
@using Class.Converter;
@using Class;
@inject TableTypesService TableService;
@inject FoodTypesService FoodService;


@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]


	<PageTitle>Deez nuts</PageTitle>
	<div class="Global--Container">
		<Header @bind-selectedPage="@selectedPage" SaveFunction="@Save" />
		<div class="BodyStyle">
			<Navbar selectedPage="@selectedPage" tableListItemsService="@tableListItemsService" foodListItemsService="@foodListItemsService"/>
			<div>
				<MainCanvas @bind-rectangles="rectangles" @bind-selectedTable="selectedTable" Log="@log" foodListItemService="@foodListItemsService"/>
			</div>
			@if (selectedTable != null)
		{
			<PropertiesSideBar selectedTable="selectedTable" ClearTableFunc="@clearTable" />
		}
	</div>
</div>



@code{
	public List<ITable>? rectangles = null;
	public ITable? selectedTable = null;
	private string selectedPage = "Table";

	public TableListItemsService? tableListItemsService { get; set; }
	public FoodListItemService? foodListItemsService { get; set; }

	[Inject]
	public IJSRuntime? JS { get; set; }

	public void clearTable()
	{
		if(selectedTable != null)
		{
			selectedTable.Foods.Clear();
		}
	}

	public void Save()
	{
		//string tablesJSON = JsonSerializer.Serialize(rectangles);
		if (rectangles != null && tableListItemsService != null)
		{
			string tablesJSON = TablesToDtoConverter.ConvertToJson(rectangles);
			string tablesDataJSON = JsonSerializer.Serialize(tableListItemsService.Items);
			if(JS != null)
			{
				//Console.WriteLine(tablesJSON);
				JS.InvokeVoidAsync("canvasInterop.logJSONObject", tablesDataJSON);
			}

		}
	}

	public void log()
	{
		Console.WriteLine(selectedTable);
	}

	// private void OnSelectedPage(string page)
	// {
	// 	selectedPage = page;
	// }

	private string? tableResponse; 
	private async Task FetchTables() { 
		tableResponse = await TableService.GetTablesAsync();
	}

	private string? foodResponse;
	private async Task FetchFood(){
		foodResponse = await FoodService.GetFoodsAsync();
	}


	protected override async Task OnInitializedAsync()
	{
		tableListItemsService = new TableListItemsService();
		foodListItemsService = new FoodListItemService();

		await FetchTables();
		if (tableResponse != null && tableListItemsService != null)
		{
			tableListItemsService.SetItemsFromJson(tableResponse);

		}

		await FetchFood();
		if(foodResponse != null && foodListItemsService != null){
			foodListItemsService.SetItemsFromJson(foodResponse);
			Console.WriteLine(foodListItemsService.ToString());
			//Console.WriteLine($"Response: {foodResponse}");
		}


		// List<Shape> tables = new List<Shape>()
		// {
		// 	new Shape("S001","./public/square.svg","Rectangle",100,100, 0, "rectangle"),
		// 	new Shape("S002","./public/circle.svg","Circular",0, 0, 100, "circle")
		// };
		// tableListItemsService.setItems(
		// new List<ShapeListItem>([
		// 	new ShapeListItem{
		// 			Id = 1,
		// 			Title = "Table",
		// 			Content = tables
		// 		},
		// 	])
		// );
		

		// var food1 = new Food(1, "Pizza", 10, 12.99m, "Available", "path/to/pizza.jpg"); 
		// var food2 = new Food(2, "Burger", 15, 8.99m, "Available", "path/to/burger.jpg"); 
		// var food3 = new Food(3, "Pasta", 20, 10.50m, "Available", "path/to/pasta.jpg"); // Creating sample FoodListItem objects 
		// var food4 = new Food(4, "Deez Nuts", 20, 10.50m, "Available", "path/to/nuts.jpg");

		// var foodListItem1 = new FoodListItem { 
		// 	Id = 1, Title = "Main Courses", 
		// 	Content = new List<Food> { food1, food2, food3 } 
		// }; 
		// var foodListItem2 = new FoodListItem { 
		// 		Id = 2,
		// 		Title = "Desserts",
		// 		Content = new List<Food> { food4 } // Example with single item
		// };

		// foodListItemsService.setItems(
		// 	new List<FoodListItem> { foodListItem1, foodListItem2 }
		// );

		await base.OnInitializedAsync();
	}
}
