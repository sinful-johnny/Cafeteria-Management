@page "/Home"
@using BlazorApp2.Components;
@using System.Text.Json;
@using BlazorApp4.Client.Components
@using BlazorApp4.Client.Layout
@using Class.Auth
@using Class.Controller
@using Class.Services;
@using Class.Converter;
@using Class;
@inject TableTypesService TableTypeService;
@inject FoodTypesService FoodService;
@inject TableService TableService;
@inject MenuResourceService MenuResourceService;

@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@using static Class.Converter.TablesToDtoConverter

@attribute [Authorize]

<AuthorizeView Policy="Read" Resource="menuResource">
	<Authorized>
		@if (@context.User.Identity != null)
		{
			<PageTitle>@context.User.Identity.Name</PageTitle>
		}
		else
		{
			<PageTitle>Deez Nuts</PageTitle>
		}

		<div class="Global--Container">
			<Header @bind-selectedPage="@selectedPage" SaveFunction="@Save" resource="@menuResource?.Children?.FirstOrDefault(r => r.MenuName == "Header")"/>
			<div class="BodyStyle">
				<AuthorizeView Context="Navbar" Policy="Read" Resource="@menuResource?.Children?.FirstOrDefault(r => r.MenuName == "Navbar")">
					<Authorized>
						<Navbar selectedPage="@selectedPage"
								tableListItemsService="@tableListItemsService"
								foodListItemsService="@foodListItemsService"
								Resource="@menuResource?.Children?.FirstOrDefault(r => r.MenuName == "Navbar")" />
					</Authorized>
					<NotAuthorized></NotAuthorized>
				</AuthorizeView>
				<div>
					@if (rectangles != null)
					{
						<AuthorizeView Context="Canvas" Resource="@menuResource?.Children?.FirstOrDefault(r => r.MenuName == "MainCanvas")" Policy="ReadWrite">
							<Authorized>
								<MainCanvas @bind-rectangles="rectangles" @bind-selectedTable="selectedTable" Log="@log" foodListItemService="@foodListItemsService" />
							</Authorized>
							<NotAuthorized>
								<AuthorizeView Context="ReadOnlyCanvas" Resource="@menuResource?.Children?.FirstOrDefault(r => r.MenuName == "MainCanvas")" Policy="Read">
									<Authorized>
										<ReadOnlyCanvas @bind-rectangles="rectangles" @bind-selectedTable="selectedTable" Log="@log" foodListItemService="@foodListItemsService"/>
									</Authorized>
									<NotAuthorized>You can not see the canvas!</NotAuthorized>
								</AuthorizeView>
							</NotAuthorized>
						</AuthorizeView>
						//<MainCanvas @bind-rectangles="rectangles" @bind-selectedTable="selectedTable" Log="@log" foodListItemService="@foodListItemsService" />
					}
				</div>
				<AuthorizeView Context="PropertiesSideBar" Resource="@menuResource?.Children?.FirstOrDefault(r => r.MenuName == "PropertiesSideBar")" Policy="Read">
					<Authorized>
						@if (selectedTable != null)
						{
							<PropertiesSideBar Resource="@menuResource?.Children?.FirstOrDefault(r => r.MenuName == "PropertiesSideBar")"
								FoodListItemService="foodListItemsService" 
								selectedTable="selectedTable" 		   
								ClearTableFunc="@clearTable" />
						}
					</Authorized>
					<NotAuthorized></NotAuthorized>
				</AuthorizeView>
			</div>
		</div>
	</Authorized>
	<NotAuthorized>
		<h3>@JsonSerializer.Serialize(menuResource)</h3>
	</NotAuthorized>
</AuthorizeView>


@code{
	private string MenuName = "Home";
	public MenuResource? menuResource { get; set; }

	public List<ITable>? rectangles = null;
	public ITable? selectedTable = null;
	private string selectedPage = "Table";

	public TableListItemsService? tableListItemsService { get; set; }
	public FoodListItemService? foodListItemsService { get; set; }

	public ClaimsPrincipal? user { get; set; }

	[Inject]
	public IJSRuntime? JS { get; set; }

	public void clearTable()
	{
		if(selectedTable != null)
		{
			selectedTable.Foods.Clear();
		}
	}

	public async void Save()
	{
		//string tablesJSON = JsonSerializer.Serialize(rectangles);
		if (rectangles != null && tableListItemsService != null)
		{
			string tablesJSON = TablesToDtoConverter.ConvertToJson(rectangles);
			//string tablesDataJSON = JsonSerializer.Serialize(tableListItemsService.Items);
			if(JS != null)
			{
				//Console.WriteLine(tablesJSON);
				//JS.InvokeVoidAsync("canvasInterop.logJSONObject", tablesDataJSON);
				var result = await TableService.PostTableAsync(tablesJSON);
				Console.WriteLine(result);
			}
		}
	}

	public void log()
	{
		Console.WriteLine(selectedTable);
	}

	// private void OnSelectedPage(string page)
	// {
	// 	selectedPage = page;
	// }
	private string? tableResponse; 
	private async Task FetchTables() { 
		tableResponse = await TableTypeService.GetTablesAsync();
	}

	private string? foodResponse;
	private async Task FetchFood(){
		foodResponse = await FoodService.GetFoodsAsync();
	}

	private string? canvasResponse;
	private async Task FetchCanvas(){
		canvasResponse = await TableService.GetTablesAsync();
	}

	private string? menuResourceResponse;
	private async Task FetchResource()
	{
		menuResourceResponse = await MenuResourceService.GetResourceAsync("Home");
	}


	protected override async Task OnInitializedAsync()
	{
		try{
			await FetchResource();
			if (menuResourceResponse != null)
			{
				menuResource = JsonToMenuResourceConverter.Convert(menuResourceResponse);
				//Console.WriteLine(JsonSerializer.Serialize(menuResource));
			}

			
			
			
		}catch(Exception e){

		}

		try{
			await FetchTables();
			tableListItemsService = new TableListItemsService();
			if (tableResponse != null && tableListItemsService != null)
			{
				tableListItemsService.SetItemsFromJson(tableResponse);
			}
		}
		catch (Exception e)
		{

		}

		try{
			await FetchFood();
			foodListItemsService = new FoodListItemService();
			if (foodResponse != null && foodListItemsService != null)
			{
				foodListItemsService.SetItemsFromJson(foodResponse);
				//Console.WriteLine(foodListItemsService.ToString());
			}
		}
		catch (Exception e)
		{

		}

		try{
			await FetchCanvas();
			if (canvasResponse != null)
			{
				var canvasDto = JsonSerializer.Deserialize<List<TABLE_FOODsDto>>(canvasResponse, new JsonSerializerOptions
					{
						PropertyNameCaseInsensitive = true
					});
				if (canvasDto != null)
				{
					//Console.WriteLine($"Dto: {JsonSerializer.Serialize(canvasDto)}");
					rectangles = TablesToDtoConverter.ConvertToITable(canvasDto);
					// Console.WriteLine($"Rectangles: {JsonSerializer.Serialize(rectangles)}");
				}
				if (rectangles == null)
				{
					rectangles = new List<ITable>();
				}
			}
		}
		catch (Exception e)
		{

		}
		


		
		

		


		


		
		

		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync(); 
		user = authState.User;

		await base.OnInitializedAsync();
	}
}
